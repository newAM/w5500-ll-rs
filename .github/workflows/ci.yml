on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  schedule:
    - cron: "13 3 * * 3"

name: CI

jobs:
  build:
    name: Cargo Build
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        target:
          - "x86_64-unknown-linux-gnu"
          - "thumbv6m-none-eabi"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - run: cargo build --target ${{ matrix.target }}
      - run: cargo build --target ${{ matrix.target }} --features embedded-hal
      - run: cargo build --target ${{ matrix.target }} --features defmt
      - run: cargo build --target ${{ matrix.target }} --features std
        if: ${{ contains(matrix.target, 'linux') }}
      - run: cargo build --target ${{ matrix.target }} --all-features
        if: ${{ contains(matrix.target, 'linux') }}

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      # not using clippy-check due to this issue:
      # https://github.com/actions-rs/clippy-check/issues/2
      - run: cargo clippy --all-features -- --deny warnings

  format_check:
    name: Rust Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - run: cargo +nightly fmt -- --check

  doc:
    name: doc
    runs-on: ubuntu-latest
    env: {"RUSTDOCFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo doc --no-default-features
      - run: cargo doc --no-default-features --features embedded-hal
      - run: cargo doc --no-default-features --features std
      - run: cargo doc --all-features

  rustdoc:
    name: rustdoc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - run: RUSTDOCFLAGS='--cfg docsrs -D warnings' cargo +nightly rustdoc --all-features

  release:
    name: crates.io release
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - test
      - clippy
      - format_check
      - doc
      - rustdoc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo publish --token ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
